using System;
using System.Collections.Generic;
using System.Reflection;
using Centauri.IoC.Api;

namespace Centauri.IoC.Framework {
    /// <summary>
    /// A class that manages a single control interface and all of its various
    /// implementations, and selects which implementation to use based on the
    /// weights of the various implementations.
    /// </summary>
    class ControlManager {
        /// <summary>
        /// A list of all the implementations that are currently loaded.
        /// </summary>
        readonly List<ControlImplementation> Implementations;
        /// <summary>
        /// The constructor of the proxy type that has been dynamically
        /// generated by the <see cref="IoCFramework" />.
        /// </summary>
        ConstructorInfo ProxyCtor;
        /// <summary>
        /// The singleton instance of the control proxy.
        /// </summary>
        object singleton;
        /// <summary>
        /// The framework that this class manages a control for.
        /// </summary>
        internal readonly IoCFramework Framework;
        /// <summary>
        /// The interface type of the control this class is managing.
        /// </summary>
        internal readonly Type Interface;
        /// <summary>
        /// Occurs when implementation class has changed.
        /// </summary>
        internal event Action ImplementationChanged;
        /// <summary>
        /// Gets the current implementation (the heaviest one).
        /// </summary>
        /// <value>The current implementation.</value>
        internal ControlImplementation CurrentImpl {
            get;
            private set;
        }
        /// <summary>
        /// Gets the singleton instance of the control proxy.
        /// </summary>
        /// <value>The singleton instance.</value>
        internal virtual object Singleton {
            get {
                if (singleton == null) {
                    singleton = Create();
                }
                return singleton;
            }
        }

        /// <summary>
        /// Creates a new instance of the control proxy this class manages.
        /// </summary>
        /// <returns>The new instance.</returns>
        internal virtual object Create() {
            if (ProxyCtor == null) {
                ProxyCtor = Framework.CreateProxy(this).GetTypeInfo().GetConstructor(new [] {
                    typeof(ControlManager)
                });
            }
            return ProxyCtor.Invoke(new [] {
                this
            });
        }

        /// <summary>
        /// Adds an implementation to the list of known implementations, then
        /// weighs each of the implementations to determine the best to use.
        /// </summary>
        /// <param name="impl">The new implementation to add.</param>
        internal virtual void Add(ControlImplementation impl) {
            Implementations.Add(impl);
            int weight = int.MinValue;
            ControlImplementation heaviest = null;
            foreach (ControlImplementation control in Implementations) {
                int w = control.Weight;
                if (w >= weight) {
                    weight = w;
                    heaviest = control;
                }
            }
            if (heaviest != CurrentImpl) {
                CurrentImpl = heaviest;
                ImplementationChanged?.Invoke();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlManager" />
        /// class.
        /// </summary>
        /// <param name="framework">
        /// The framework that this class manages a control for.
        /// </param>
        /// <param name="iface">
        /// The interface type of the control this class is managing.
        /// </param>
        protected ControlManager(IoCFramework framework, Type iface) {
            Framework = framework;
            Implementations = new List<ControlImplementation>();
            Interface = iface;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlManager" />
        /// class, or the <see cref="FrameworkControlManager" /> class if, and
        /// only if, the request interface is the framework interface
        /// (<see cref="IIoCFramework"/>).
        /// </summary>
        /// <returns>The new instance.</returns>
        /// <param name="framework">
        /// The framework that this class manages a control for.
        /// </param>
        /// <param name="iface">
        /// The interface type of the control this class is managing.
        /// </param>
        internal static ControlManager Create(IoCFramework framework, Type iface) {
            if (iface == typeof(IIoCFramework)) {
                return new FrameworkControlManager(framework);
            } else {
                return new ControlManager(framework, iface);
            }
        }
    }
}
